# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mavros_msgs/CommandCode.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CommandCode(genpy.Message):
  _md5sum = "f7e54ea3892a961cc44c9350fdb0855e"
  _type = "mavros_msgs/CommandCode"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Some MAV_CMD command codes.
# Actual meaning and params you may find in MAVLink documentation
# http://mavlink.org/messages/common#ENUM_MAV_CMD

# some common MAV_CMD
uint16 CMD_DO_SET_MODE = 176
uint16 CMD_DO_JUMP = 177
uint16 CMD_DO_CHANGE_SPEED = 178
uint16 CMD_DO_SET_HOME = 179
uint16 CMD_DO_SET_RELAY = 181
uint16 CMD_DO_REPEAT_RELAY = 182
uint16 CMD_DO_SET_SERVO = 183
uint16 CMD_DO_REPEAT_SERVO = 184
uint16 CMD_DO_CONTROL_VIDEO = 200
uint16 CMD_DO_SET_ROI = 201
uint16 CMD_DO_MOUNT_CONTROL = 205
uint16 CMD_DO_SET_CAM_TRIGG_DIST = 206
uint16 CMD_DO_FENCE_ENABLE = 207
uint16 CMD_DO_PARACHUTE = 208
uint16 CMD_DO_INVERTED_FLIGHT = 210
uint16 CMD_DO_MOUNT_CONTROL_QUAT = 220
uint16 CMD_PREFLIGHT_CALIBRATION = 241
uint16 CMD_MISSION_START = 300
uint16 CMD_COMPONENT_ARM_DISARM = 400
uint16 CMD_START_RX_PAIR = 500
uint16 CMD_REQUEST_AUTOPILOT_CAPABILITIES = 520
uint16 CMD_DO_TRIGGER_CONTROL = 2003

# Waypoint related commands
uint16 NAV_WAYPOINT = 16
uint16 NAV_LOITER_UNLIM = 17
uint16 NAV_LOITER_TURNS = 18
uint16 NAV_LOITER_TIME = 19
uint16 NAV_RETURN_TO_LAUNCH = 20
uint16 NAV_LAND = 21
uint16 NAV_TAKEOFF = 22

"""
  # Pseudo-constants
  CMD_DO_SET_MODE = 176
  CMD_DO_JUMP = 177
  CMD_DO_CHANGE_SPEED = 178
  CMD_DO_SET_HOME = 179
  CMD_DO_SET_RELAY = 181
  CMD_DO_REPEAT_RELAY = 182
  CMD_DO_SET_SERVO = 183
  CMD_DO_REPEAT_SERVO = 184
  CMD_DO_CONTROL_VIDEO = 200
  CMD_DO_SET_ROI = 201
  CMD_DO_MOUNT_CONTROL = 205
  CMD_DO_SET_CAM_TRIGG_DIST = 206
  CMD_DO_FENCE_ENABLE = 207
  CMD_DO_PARACHUTE = 208
  CMD_DO_INVERTED_FLIGHT = 210
  CMD_DO_MOUNT_CONTROL_QUAT = 220
  CMD_PREFLIGHT_CALIBRATION = 241
  CMD_MISSION_START = 300
  CMD_COMPONENT_ARM_DISARM = 400
  CMD_START_RX_PAIR = 500
  CMD_REQUEST_AUTOPILOT_CAPABILITIES = 520
  CMD_DO_TRIGGER_CONTROL = 2003
  NAV_WAYPOINT = 16
  NAV_LOITER_UNLIM = 17
  NAV_LOITER_TURNS = 18
  NAV_LOITER_TIME = 19
  NAV_RETURN_TO_LAUNCH = 20
  NAV_LAND = 21
  NAV_TAKEOFF = 22

  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CommandCode, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
